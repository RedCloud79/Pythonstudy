# 튜플, 사전, 집합 소개

# packing operater '*'
- 변수 대입시 남은거를 리스트로 묶는다. (무조껀 리스트로만 담아진다)
ex_1)
d, *e = 5,6,7
* 결과값
d = 5
e = [6, 7]
d,*e,f = 5,6,7
* 결과값
d = 5
e = [6]
f = 7
d,*e,f = 5,6,7,8
* 결과값
d = 5
e = [6, 7]
f = 8
d,*e,f = 5,6
* 결과값
d = 5
e = []
f = 6

* 한 개인 경우
*e, = 5,
e = [5]


* 함수의 경우
- 변경이 없기 때문에 튜플로 묶임
ex_1)
def f(a,b,*c):
    a
    b
    c
    
f(1,2,3,4,5,6) # a,b,*c = 1,2,3,4,5,6
* 결과값
1
2
(3, 4, 5, 6)

ex_2)
def g(*arg):
    arg
    
g(1,2,3,4,5,6,7) = (1, 2, 3, 4, 5, 6, 7)
type(g) = <class 'function'>
*args,=1,2,3,4,5,6,7
args = [1, 2, 3, 4, 5, 6, 7]
type(args) = <class 'list'>


## dict : key로 값 찾기
- dict 는 key와 값이 하나인 구성 '{}'

ex_1)
shopping = {}
shopping['apple']=3
shopping['pear']=2
shopping['hanrabong']=5
shopping['pine apple']=2
shopping
결과값 : {'apple': 3, 'pear': 2, 'hanrabong': 5, 'pine apple': 2}

* 접근방법
shopping
결과값 : {'apple': 3, 'pear': 2, 'hanrabong': 5, 'pine apple': 2}
shopping['apple']
결과값 : 3
shopping['hanrabong']
결과값 : 5

* 주요 함수
- 풀어 내는 방법 : List(), unpacking operator '*'
shopping.keys()
결과값 : dict_keys(['apple', 'pear', 'hanrabong', 'pine apple'])
shopping.values()
결과값 : dict_values([3, 2, 5, 2])
shopping.items()
결과값 : dict_items([('apple', 3), ('pear', 2), ('hanrabong', 5), ('pine apple', 2)])

[*shopping.keys()]
결과값 : ['apple', 'pear', 'hanrabong', 'pine apple']
[*shopping.values()]
결과값 : [3, 2, 5, 2]
[*shopping.items()]
결과값 : [('apple', 3), ('pear', 2), ('hanrabong', 5), ('pine apple', 2)]

* dict와 for-in문
for key in shopping.keys():
    key
* 결과값    
'apple'
'pear'
'hanrabong'
'pine apple'
for item in shopping.items():
    item
* 결과값    
('apple', 3)
('pear', 2)
('hanrabong', 5)
('pine apple', 2)


ex_1) 장보기 1
shopping = {'apple': 3, 'pear': 2, 'hanrabong': 5, 'pine apple': 2}
basket = []
for fruit, how_many in shopping.items():
    fruit, how_many
    plastic_bag=[]
    for _ in range(how_many):
        plastic_bag.append(fruit)
    basket.append(plastic_bag)
    
('apple', 3)
('pear', 2)
('hanrabong', 5)
('pine apple', 2)
basket
결과값 : [['apple', 'apple', 'apple'], ['pear', 'pear'], ['hanrabong', 'hanrabong', 'hanrabong',
'hanrabong', 'hanrabong'], ['pine apple', 'pine apple']]

ex_2) 장보기 2
shopping = {'apple': 3, 'pear': 2, 'hanrabong': 5, 'pine apple': 2}
for fruit, how_many in shopping.items():
    fruit, how_many
    basket.append([fruit]*how_many)
    
('apple', 3)
('pear', 2)
('hanrabong', 5)
('pine apple', 2)
basket = [['apple', 'apple', 'apple'], ['pear', 'pear'], ['hanrabong', 'hanrabong',
'hanrabong', 'hanrabong', 'hanrabong'], ['pine apple', 'pine apple']]

ex_3) 장보기 3
shopping = {'apple': 3, 'pear': 2, 'hanrabong': 5, 'pine apple': 2}
basket = [[fruit]*how_many for fruit,how_many in shopping.items()]
basket = [['apple', 'apple', 'apple'], ['pear', 'pear'], ['hanrabong', 'hanrabong',
'hanrabong', 'hanrabong', 'hanrabong'], ['pine apple', 'pine apple']]

ex_4) 장보기 4
shopping = {'apple': 3, 'pear': 2, 'hanrabong': 5, 'pine apple': 2}
while shopping:
    fruit,how_many = shopping.popitem()
    fruit,how_many
    basket.append([fruit]*how_many)
    
('pine apple', 2)
('hanrabong', 5)
('pear', 2)
('apple', 3)
shopping = {}
basket = [['pine apple', 'pine apple'], ['hanrabong', 'hanrabong', 'hanrabong',
'hanrabong', 'hanrabong'], ['pear', 'pear'], ['apple', 'apple', 'apple']]


## 함수
- 작은 동작을 묶어서 큰 동작으로 만드는 작업 큰 동작은 대표 동작
- 함수는 잘 정의하면 재사용할 수 있음(재사용성), 함수의 이름을 잘 정하면 가독성을 높일 수 있음(가독성)
* 기본 형태
def name(arguments):
        """description for name"""
        # TODO: write code ...
        
ex_1)
def k (a,b):
    q = a//b
    r = a%b
    return q,r
a = 19
b = 5
q, r = k(a,b)

# 위치 기반 인자, 키워드 기반인자
ex_1)
def func(a,b):
    a,b
    
func(10,20)
결과값 : (10, 20)
func('hello','world')
결과값 : ('hello', 'world')
func(b=100, a=3000)
결과값 : (3000, 100)

ex_1) 커피 자판기
menu = {
    'americano': 1500,
    'caffe latte': 2500,
    'aspresso': 1500,
    }
total_money =  0
def coffee_machine(money, coffee_in):
    change, coffee_out = money, None
    if coffee_in in menu.keys():
        value = menu[coffee_in]
        if money>=value:
            change = money - value
            coffee_out = coffee_in
    return change, coffee_out

change, coffee = coffee_machine(5000, 'americano')
print(change, coffee)
결과값 : 3500 americano

# '*args'인자 이해하기
ex_1)
def func(*args):
    args
    
func(1,2,3,4)
결과값 : (1, 2, 3, 4)
l=[5,6,7,8]
func(*l)
결과값 : (5, 6, 7, 8)
values = 1,2,3,4
values
결과값 : (1, 2, 3, 4)
*values, = 1,2,3,4
values
결과값 : [1, 2, 3, 4]
[*values]
결과값 : [1, 2, 3, 4]

# '**kwargs'
ex_1)
def func(**kwargs):
    kwargs
    
func(americano=1500,caffe_latte=2000,espresso=1500)
결과값 : {'americano': 1500, 'caffe_latte': 2000, 'espresso': 1500}
menu = {'americano':1500, 'caffe latte':2000, 'espresso':1500}
menu
결과값 : {'americano': 1500, 'caffe latte': 2000, 'espresso': 1500}
func(**menu)
결과값 : {'americano': 1500, 'caffe latte': 2000, 'espresso': 1500}


# enumerate(리스트 항목 순서가 필요할 때)
for i, coffee in enumerate(['americano', 'caffe latte', 'espresso']):
    i, coffee
* 결과값    
(0, 'americano')
(1, 'caffe latte')
(2, 'espresso')

# zip (리스트 항목별 묶기) * 휘발성 데이터 (일회용)
ex_1) * zip으로 리스트 묶기
l1 = ['americano', 'caffe late', 'espresso','green tea']
l2 = [1500, 2500, 1600, 2200]
z = zip(l1, l2)
for coffee, price in z:
    coffee, price
* 결과값    
('americano', 1500)
('caffe late', 2500)
('espresso', 1600)
('green tea', 2200)


ex_2) * zip으로 리스트 풀기
l1 = ['americano', 'caffe late', 'espresso','green tea']
l2 = [1500, 2500, 1600, 2200]
z = zip(l1, l2)
l1_l2 = []
for coffee, price in z:
    l1_l2.append((coffee, price))
    
l1_l2
결과값 : [('americano', 1500), ('caffe late', 2500), ('espresso', 1600), ('green tea', 2200)]
z2 = zip(*l1_l2)
z2
결과값 : <zip object at 0x000001326A327F40>
ze=[*z2]
ze
결과값 : [('americano', 'caffe late', 'espresso', 'green tea'), (1500, 2500, 1600, 2200)]
l1,l2=ze
l1
결과값 : ('americano', 'caffe late', 'espresso', 'green tea')
l2
결과값 : (1500, 2500, 1600, 2200)

# lambda, filter, for-in 


## 파일 읽고 쓰기
- 입출력 방법이 꼭 input()과 print()만 있는 것은 아님
형식 : f = open("새파일.txt", 'w')
w : 쓰기 모드- 파일에 내용을 쓸 때 사용
r : 읽기 모드- 파일을 읽기만 할 때 사용
a : 추가 모드- 파일의 마지막에 새로운 내용을 추가할 때 사용

