# Iterable - 반복 가능한 ( for-in 문 in에서 쓸 수 있는 )
- [], (), {}
*** for - in의 형태 ***
for i in [1,2,3,4]:
for i in range(5):
for i in (1,2,3,4):
for i in {'a':1,'b':2}:
for i in {'a':1,'b':2}.keys():
for i in {'a':1,'b':2}.values():
for i in {'a':1,'b':2}.items():
for i in [1,2,3,4][:]:
for i in [1,2,3,4][3]:


#튜플
[*[1,2,3,4]] <==> *[1,2,3,4], == (*[1,2,3,4],)


## .clear()
ex_1)
a = {'name': 'pey', 'phone': '123456789', 'birth': '1234'}
a.clear()
a
결과값 : {}


## 찾고자하는 key in 딕셔너리 위치
ex_1)
a = {'name':'pey','phone':'123456789','birth':'1234'}
'name' in a
결과값 : True
'email' in a
결과값 : False


## 집합 자료형
- 집합 (Set)
- 집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형
- 중복된 데이터를 하나만 남기기 위해서 활용
- '{}'로 감싸져있는 형태
- 중복을 허용하지 않음, 순서가 없음(Unordered)
- list(), tuple() 함수를 사용하여 index사용 가능


## 교집합, 합집합, 차집합 구하기
- 교집합 : '&'기호나 intersection()함수를 사용
- 합집합 : '|'기호나 union() 함수를 사용
- 차집합 : '-'기호나 difference() 함수를 사용

ex_1)
s1 = set ([1,2,3,4,5,6])
s2 = set ([4,5,6,7,8,9])

s1&s2 # 교집합
s1.intersection(s2)
결과값 : {4, 5, 6}

s1|s2 # 합집합
s1.union(s2)
결과값 : {1, 2, 3, 4, 5, 6, 7, 8, 9}

s1-s2 # 차집합
s1.difference(s2)
결과값 : {1, 2, 3}
s2-s1
s2.difference(s1)
결과값 : {8, 9, 7}

ex_2) * 랜덤인 숫자로 교,합,차집합 구하기
import numpy as np

s1 = {*np.random.randint(-100,100,100)}
s2 = {*np.random.randint(-100,100,100)}
print(len(s1))
print(len(s2))
print(s1&s2)
print("교집합: ", len(s1&s2))
print(s1|s2)
print("합집합: ", len(s1|s2))
print(s1-s2)
print("차집합: ", len(s1-s2))

# 집합 관련 함수
.add() - 이미 만들어진 set 자료형에 값 추가
.update() - 여러 개의 값을 한꺼번에 추가
.remove() - 특정 값을 제거


## 불자료형 (Bool)
- 참(True)과 거짓(False)를 나타내는 자료형
- 조건문의 반환 값으로도 사용됨


## 자료형의 값을 저장하는 공간, 변수
- 파이썬에서 사용하는 변수는 객체를 가리키는 것이라고 할 수 있음
- 객체 = 자료형과 같은 것을 의미하는 말
- 변수의 이름
- '='(assignment) 기호 상용
@ 변수를 만드는 여러가지 방법
( 튜플, 리스트, 변수 값 바꾸기 )


## if문
- if와 else를 사용한 조건문의 기본 구조
if 조건문:
    수행할 문장1
    수행할 문장2
    ...
else:
    수행할 문장1
    수행할 문장2
    ...
    
# elif 사용법
- if 와 else만으로는 조건 판단에 어려움이 있음
- elif는 개수에 제한 없이 사용 가능

ex_1)
pocket = ['paper', 'cellphone']
card = True
if 'money' in pocket:
    print ('택시를 타고 가라')
elif card:
    print('택시를 타고 가라')
else:
    print(' 걸어가라 ')
결과값 : 택시를 타고 가라


## while 문
- 반복해서 문장을 수행해야 할 경우 while문 사용
- while문은 조건문이 참인 동안에 while문 아래 문장이 반복해서 수행

ex_1)
treehit = 0
while treehit < 10:
    treehit += 1
    print("나무를 %d번 찍었습니다. " % treehit)
    if treehit == 10:
        print("나무 넘어갑니다")

* 결과값
나무를 1번 찍었습니다. 
나무를 2번 찍었습니다. 
나무를 3번 찍었습니다. 
나무를 4번 찍었습니다. 
나무를 5번 찍었습니다. 
나무를 6번 찍었습니다. 
나무를 7번 찍었습니다. 
나무를 8번 찍었습니다. 
나무를 9번 찍었습니다. 
나무를 10번 찍었습니다. 
나무 넘어갑니다

# break문
- 강제로 while문을 빠져나오게 합니다

ex_1)
coffee = 10
money = 300
while money:
    print("돈을 받았으니 커피를 줍니다.")
    coffee -= 1
    print("남은 커피의 양은 %d개 입니다." %coffee)
    if coffee == 0:
        ("커피가 다 떨어졌습니다. 판매를 중지합니다.")
        break

* 결과값
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 9개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 8개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 7개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 6개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 5개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 4개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 3개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 2개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 1개 입니다.
돈을 받았으니 커피를 줍니다.
남은 커피의 양은 0개 입니다.
'커피가 다 떨어졌습니다. 판매를 중지합니다.'

# continue문
- while문을 빠져나가지 않고 while문의 맨 처음(조건문)으로 다시 돌아가야 할 때 사용

ex_1)
a=0
while a < 10:
    a += 1
    if a % 2 ==0: continue
    print(a)

* 결과값
1
3
5
7
9


## for문
- while문과 비슷한 반복문, 리스트 형태를 처리하는데 용이함
- 리스트나 튜플, 문자열의 첫 번째 요소부터 마지막 요소까지 차례로 변수에 대입되어
'수행할 문장1', '수행할 문장2' 등이 수행됨
ex_1)
test_list = ['one','two','three']
for i in test_list:
    i
* 결과값
'one'
'two'
'three'

# enumerate ( 인덱스 값의 숫자를 순서로 붙여줌 )
ex_1)
fridge = ['apple','straw bery','mango']
for i in enumerate(fridge):
    i
*결과값    
(0, 'apple')
(1, 'straw bery')
(2, 'mango')

# range()
- 숫자 리스트를 자동으로 만들어주는 함수
ex_1)
b=range(0,10,2)
[*b]
* 결과값
[0, 2, 4, 6, 8]










