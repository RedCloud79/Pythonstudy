## 클래스

# 클래스
- 똑같은 무엇인가를 계속해서 만들어 낼 수 있는 설계 도면

# 객체
- 클래스로 만든 피조물

* 클래스로 만든 객체의 특징
- 객체마다 고유한 성격을 가짐
- 동일한 클래스로 만든 객체들은 서로 전혀 영향을 주 않음

# 사칙연산 클래스 구성하기

#FourCal 클래스 만들기
- 사칙연산을 가능하게 하는 FourCal 클래스 만들기
ex_1)
class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
        
a=FourCal()
a.setdata(4,2)
a.first
결과값 : 4
a.second
결과값 : 2

# 매서드
- 클래스 안에 구현된 함수
- 매서드도 클래스에 포함되어 있다는 점만 제외하면 일반 함수와 다를 것이 없음.
- self, first, second 3개의 입력값
- 일반 함수와는 달리 메서드의 첫 번째 매개변수 'self'는 특별한 의미이다.

ex_2)
FourCal.setdata(b,5,8)
b.first
결과값 : 5
b.second
결과값 : 8

- 클래스로 만든 객체의 객체변수는 다른 객체의 객체변수와 상관없이 독립적인 값을 유지
ex_1)
a = FourCal()
b = FourCal()
a.setdata(4,2)
b.setdata(3,7)
id(a.first)
결과값 : 2901290254672
id(b.first)
결과값 : 2901290254640

ex_2) 더하기 기능만들기( 빼기, 곱, 나누기)
class FourCal:
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self.second
        return result
    
a = FourCal()
a.setdata(4,2)
a.mul()
결과값 : 8
a.sub()
결과값 : 2
a.div()
결과값 : 2.0


# 생성자
- 객체가 생성될 때 자도으로 호출되는 메서드
- 메서드 이름으로 __init__사용
- 객체에 초깃값을 설정해야 할 필요가 있을 대 생성자를 구현하는 것이 안전한 방법
ex_1)
class FourCal:
    def __init__(self, first, second):
        self.first = first
        self.second = second
        
- AttributeError 오류 = FourCal클래스의 객체가 setdata를 거치지 않고 add를 수행할경우 발생

# 클래스 상속 ( Inheritance )
- '물려받는다'라는 뜻, 어떤 클래스를 만들 때 다른 클래스의 기능을 물려받을 수 있게 만드는 것
* 양식 == class 클래스 이름 ( 상속할 클래스 이름 )

# 클래스 변수
- 다른 객체들에 영향받지 않고 독립적으로 값을 유지하는 객체변수와는 다른 클래스 변수
- 클래스 변수는 클래스 안에 변수르르 선언하여 생성
ex_1)
class Family:
    lstname = "김"
    
print(Family.lstname)
결과값 : 김

* 활용
- 클래스로 만든 객체를 통해서도 클래스 변수 사용 가능
a = Family()
b = Family()
print(a.lstname)
결과값 : 김
print(b.lstname)
결과값 : 김

- 클래스의 클래스변수를 변경하려면?
Family.lstname = "박"
print(a.lstname)
결과값 : 박
print(b.lstname)
결과값 : 박


