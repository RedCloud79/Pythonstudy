## 무명 함수 : lambda
- 한 줄로 이루어진 함수들을 사용
- def를 대신하여 사용한다.

ex_1)
f = lambda a,b : a*b
f(10,20)
결과값 : 200
f2 = lambda a : a**2
f2(3)
결과값 : 9
f3 = lambda a : a>2
f3(2)
결과값 : False

# lambda, map, for-in 문의 활용
- 변수 = map(함수, [리스트,튜블 등..]) 으로 구성

ex_1)
f = lambda a,b : a*b
f(10,20)
결과값 : 200
m=map(lambda a : a**2, [1,2,3,4])
m
결과값 : <map object at 0x000001D23B340DC0>
m =[*m]
m
결과값 : [1, 4, 9, 16]

ex_2)
>>> f=lambda a:a**2
>>> l=[1,2,3,4]
>>> for m in map(f,l):
    m
* 결과값
1
4
9
16

# lambda, filter, for-in 문의 활용

ex_1)
f = filter(lambda a: a>2, [1,2,3,4])
f
결과값 : <filter object at 0x000001D23B343550>
f=[*f]
f
결과값 : [3, 4]
f=lambda a:a>2
l=[1,2,3,4]
for f in filter(f,l):
    f
* 결과값
3
4


## class
- 변수 -> 클래스 -> 멤버변수 -> 속성(attributes)
  함수              멤버함수 -> 방법(methods)
- 클래스는 객체를 만드는 틀이다. 객체는 속성과 방법을 가지고 있다. 객체의 방법은 객체가 갖는 속성에대한
접근 방법을 말한다.
- 객체는 일반적으로 하나의 속성으로 결정되지 않는다. 객체는 여러 개의 속성과 방법을 하나로 묶는 역할을 한다.
- 함수는 어떤 목적을 갖는 하나 이상의 동작을 순차적으로 묶어 상위 동작을 만드는 개념.
- 하나 이상의 변수와 함수를 묶어 상위 형태의 자료형을 만드는 개념.

* __init__ = 객체를 초기화 시켜주는 함수 ( 필요한 속성을 생성 )
* instance = 어떤 클래스의 객체인지 알려주는 함수 ( 해당 클래스의 변수이다.)

* dir() = 함수가 가지고 있는 활가능한 변수를 보여줌

ex_1)
class Student:
    def __init__(self, name, age, gender):
        self.name = name
        self.age = age
        self.gender = gender
        
mr_hong = Student('홍길동','23','남')
mr_hong.name
결과값 : '홍길동'
mr_hong.age
결과값 : '23'
mr_hong.gender
결과값 : '남'

ex_2) Rc카
class RCCar:
    def __init__(self):
        self.dir = 'stop'
        self.spd = 0
    def go_forward(self):
        self.dir = 'forward'
    def go_backward(self):
        self.dir = 'backward'
    def turn_left(self):
        self.dir = 'left'
    def go_right(self):
        self.dir = 'right'
    def set_speed(self, spd):
        self.spd = spd
    def stop(self):
        self.dir = 'stop'
        self.spd = 0
    def show_state(self):
        self.dir, self.spd
        
mycar = RCCar()
mycar.go_forward()
mycar.set_speed(30)
mycar.show_state()
결과값 : ('forward', 30)


ex_3) rc카 리모컨 (ex_2와 연결됨)
class Remote:
    def __init__(self, car):
        self.car = car
    def go_forward(self, spd):
        self.car.go_forward()
        self.car.set_speed(spd)
    def stop(self):
        self.car.stop()
    def show_screen(self):
        self.car.show_state()
        
mycar = RCCar()
remote = Remote(mycar)
remote.go_forward(30)
remote.show_screen()
결과값 : ('forward', 30)
remote.stop()
remote.show_screen()
결과값 : ('stop', 0)


ex_4) 커피 머신
class CoffeeMachine:
    def __init__(self):
        self.menu = {}
        self.total_money = 0
    def set_menu(self,**menu):
        self.menu = menu
    def get_coffee(self, money_in, coffee_in):
        change, coffee_out = money_in, None
        if coffee_in in self.menu.keys():
            price = self.menu[coffee_in]
            if money_in>=price:
                change = money_in - price
                coffee_out = coffee_in
        return change, coffee_out
    
cm = CoffeeMachine()
menu = {
    'americano':1500,
    'caffe latte':2500,
    'espresso':1500,
    }
cm.set_menu(**menu)
print(cm.menu)
결과값 : {'americano': 1500, 'caffe latte': 2500, 'espresso': 1500}
change, coffee = cm.get_coffee(5000, 'espresso')
print(change, coffee)
결과값 : 3500 espresso









